// Mandelbrot set computations
// See http://en.wikipedia.org/wiki/Mandelbrot_set

use RGB, Complex64;
use Image2DRGB;

operator computePixel(Index index, 
  io Image2DRGB image,
  Complex64 center,
  Float64 zoom,
  Size maxIterations
  )
{
  Index row = index / image.width;
  Index col = index % image.width;
  
  Float64 width = 4.0 / zoom;
  Float64 height = width / image.width * image.height;
  Complex64 c(
    center.re - width/2 + Float64(col) / Float64(image.width - 1) * width,
    center.im - height/2 + Float64(row) / Float64(image.height - 1) * height,
    );
  
  Size dwell = 0;
  // Test if point lies within main cardoid of set
  Float64 reOffset = c.re - 0.25;
  Float64 reOffsetSq = reOffset*reOffset;
  Float64 imSq = c.im*c.im;
  Float64 q = reOffsetSq + imSq;
  if ( q*(q+reOffset) < 0.25*imSq )
    dwell = maxIterations;
  else {
    dwell = 0;
    Complex64 z = c;
    for (dwell=0; z.normSq() < 4 && dwell < maxIterations; ++dwell) {
      z = z*z + c;
    }
  }
  
  if (dwell == maxIterations)
    image.setPixel(col, row, RGB(0, 0, 0));
  else
  {
    Byte shade = dwell % 128 + 128;
    Byte offset = ~((dwell / 128) % 7);
    image.setPixel(col, row, RGB(
      offset&1 ? shade : 0,
      offset&2 ? shade : 0,
      offset&4 ? shade : 0
      ));
  }
}

operator computePixels(
  Size width, 
  Size height, 
  io Image2DRGB image,
  Complex64 center,
  Float64 zoom,
  Size maxIterations
){
  image.resize(width, height);
  executeParallel(computePixel, image.pixels.size(),
    image,
    center,
    zoom,
    maxIterations
  );
  image.incrementVersion();
}

