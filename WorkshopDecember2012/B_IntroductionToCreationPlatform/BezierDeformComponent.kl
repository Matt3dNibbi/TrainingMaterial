/*
 *  Copyright 2010-2012 Fabric Engine Inc. All rights reserved.
 */

require Math;
require Geometry;

operator bezierDeformOpTask(
  Index index,
  io Vec3 pos[],
  Vec3 origins[],
  Vec2 yBounds,
  Scalar scale,
  Vec3 control1,
  Vec3 control2,
  Vec3 control3,
  Vec3 control4
) {
  Vec3 origin = origins[index];
  
  // compute the u value
  Scalar uValue = (origin.y - yBounds.x - 0.0001) / (yBounds.y - yBounds.x);

  // compute the bezier pos
  Vec3 control12 = control1.linearInterpolate(control2, uValue);
  Vec3 control23 = control2.linearInterpolate(control3, uValue);
  Vec3 control34 = control3.linearInterpolate(control4, uValue);
  Vec3 control1223 = control12.linearInterpolate(control23, uValue);
  Vec3 control2334 = control23.linearInterpolate(control34, uValue);
  Vec3 tangent = control2334 - control1223;
  Vec3 bezierPos = control1223.linearInterpolate(control2334, uValue);
  
  Vec3 x(1.0, 0.0, 0.0);
  Vec3 z = x.cross(tangent).unit();
  x = tangent.cross(z).unit();

  // localize the position  
  Vec3 position = bezierPos;
  position += origin.x * x * scale;
  position += origin.z * z * scale;
  
  // output the position
  pos[index] = position;
}

operator bezierDeformOp(
  io PolygonMesh mesh,
  io Vec3 origins[],
  io Vec2 yBounds,
  Scalar scale,
  Vec3 control1,
  Vec3 control2,
  Vec3 control3,
  Vec3 control4
) {

  // get the position attribute
  Ref<Vec3Attribute> positions = mesh.getAttributes().getPositions();
  Ref<Vec3Attribute> normals = mesh.getAttributes().getNormals();

  // first time around init the origins
  if(origins.size() == 0) {
    origins += positions.values;

    // compute the bounds for the Y axis
    yBounds.x = origins[0].y;
    yBounds.y = origins[0].y;
    for(Size i=1;i<origins.size();i++) {
      if(yBounds.x > origins[i].y)
        yBounds.x = origins[i].y;
      if(yBounds.y < origins[i].y)
        yBounds.y = origins[i].y;
    }
    
    // add this for precision
    yBounds.x -= 0.001;
    yBounds.y += 0.001;
  }
  
  // compute the number of points
  // run the deformer in parallel
  bezierDeformOpTask<<<positions.values.size()>>>(
    positions.values,
    origins,
    yBounds,
    scale,
    control1,
    control2,
    control3,
    control4
  );

  positions.incrementVersion();
  normals.incrementVersion();

  // compute the normals
  mesh.recomputePointNormals();

}