import os, sys


#---------------------------------------------------------
extEnv = Environment()

if sys.platform == 'win32':
  buildOS = 'Windows'
elif sys.platform == 'linux2':
  buildOS = 'Linux'

buildArch = 'x86_64'

extEnv.Append(CPPPATH = [os.path.join(os.environ['FABRIC_EDK_DIR'], 'include')])

extFiles = []
extFiles += Glob('*.kl')
extFiles += Glob('*.json')

edkLibrary = extEnv.SharedLibrary('SimpleExtension'+'-'+buildOS+'-'+buildArch, Glob('SimpleExtension.cpp'))
extFiles += edkLibrary

extAlias = extEnv.Alias('ext', extFiles)

#---------------------------------------------------------

testEnv = Environment()

testEnv.Append(CPPPATH = [os.environ['FABRICSPLICE_API_DIR']])
testEnv.Append(LIBPATH = [os.environ['FABRICSPLICE_API_DIR']])
testEnv.Append(CPPDEFINES = ['FEC_STATIC', 'FECS_STATIC'])

# Fabric Engine libraries
testEnv.Append(LIBS = ['FabricSplice-1.11.2_ss', 'FabricCore-1.11_s'])

# standard libraries
if buildOS == 'Windows':
  testEnv.Append(LIBS = ['user32', 'advapi32', 'gdi32', 'shell32', 'ws2_32', 'Opengl32', 'glu32'])
else:
  testEnv.Append(LIBS = ['X11', 'GLU', 'GL', 'dl', 'pthread'])

testProgram = testEnv.Program('test', Glob('test.cpp'))
testAlias = testEnv.Alias('test', testProgram)

#---------------------------------------------------------

Alias('all', [extAlias, testAlias])
