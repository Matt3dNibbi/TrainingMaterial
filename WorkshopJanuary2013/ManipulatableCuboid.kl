require Math;
require GizmoType;
require Geometry;

operator deformManipulatableCuboid(
  io PolygonMesh mesh,
  io Vec3 gizmoPoints[]
) {
  if(gizmoPoints.size() != mesh.pointCount()) {

  // if the gizmoPoints are not set yet, initialize them
    gizmoPoints.resize(mesh.pointCount());
    for(Size i=0; i<gizmoPoints.size(); i++)
      gizmoPoints[i] = mesh.getPointPosition(i);

  } else {

    // copy the gizmo positions back into the attributes
    for(Size offset=0, i=0; i<gizmoPoints.size(); i++)
      mesh.setPointPosition(i, gizmoPoints[i]);

    // compute the normals as well
    mesh.recomputePointNormals();
  }
}

function drawManipulatableCuboidGizmosSingleSlice(
  Vec3 gizmoPoints[],
  LocalBoundingVolume bbox,
  io GizmoType gizmo
) {

  Color red(1.0, 0.0, 0.0, 1.0);
  Color green(0.0, 1.0, 0.0, 1.0);
  Color blue(0.0, 0.0, 1.0, 1.0);
  Color yellow(1.0, 1.0, 0.0, 1.0);

  // empty the gizmo
  gizmo.reset();
  if(gizmoPoints.size() == 0)
    return;

  // define a xfo for gizmo drawing
  Xfo xfo();

  // let's get the center position
  xfo.tr = (bbox.pt1 + bbox.pt2) * 0.5;
  Scalar circleRadius = abs(bbox.pt1.x - bbox.pt2.x) * 0.6;
  Scalar sphereRadius = abs(bbox.pt1.x - bbox.pt2.x) * 0.05;

  // draw a gizmo as the center
  gizmo.geometry.drawTrianglesSphere(xfo, sphereRadius, yellow, 8);
  gizmo.endGizmo(xfo, "center", 0, 0);

  // also let's draw a circle for relative scale
  gizmo.geometry.drawCircle(xfo, circleRadius, blue, 16);
  gizmo.endGizmo(xfo, "scale", 0, 0);

  // finally let's draw all of the points
  for(Size i=0;i<gizmoPoints.size();i++) {

    xfo.tr = gizmoPoints[i];
    gizmo.geometry.drawTrianglesSphere(xfo, sphereRadius, green, 8);

    // describe the gizmo as handler 'point', binding i and id 0
    gizmo.endGizmo(xfo, "point", i, 0);

  }

}

operator drawManipulatableCuboidGizmos(
  Container geometry,
  io Container self,
  Vec3 gizmoPoints<>[],
  LocalBoundingVolume bbox<>,
  io GizmoType gizmo<>
) {
  // resize the nodes,
  // so that we have as many gizmos as geometries
  self.resize(geometry.size());

  // loop over all slices
  for(Size slice=0; slice<gizmoPoints.size(); slice++) {

    drawManipulatableCuboidGizmosSingleSlice(
      gizmoPoints[slice],
      bbox[slice],
      gizmo[slice]
    );

  }
}
