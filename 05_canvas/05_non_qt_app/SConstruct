import os, sys
import platform

AddOption('--buildType',
                  dest='buildType',
                  type='string',
                  nargs=1,
                  action='store',
                  help='Type of build to perform (Release or Debug)')

if not platform.system().lower().startswith('win'):
  # todo: other operating systems
  raise Exception("This extension only builds for Windows.")

thirdpartyDirs = {
  'FABRIC_DIR': "Should point to Fabric Engine's installation folder.",
  'QT_DIR': "Should point to the root of Qt folder.",
  'FABRIC_UI_DIR': "Should point to the root of FabricUI checkout.",
}

buildType = 'Release'

if str(GetOption('buildType')).lower() == 'debug':
  buildType = 'Debug'
  
# help debug print
if GetOption('help'):
  print 'Required environment variables: '
  for thirdpartyDir in thirdpartyDirs:
    print thirdpartyDir + ': ' + thirdpartyDirs[thirdpartyDir]
  print ''
  Exit()

# for windows for now use Visual Studio 2013
# if you upgrade this you will also have to provide
# boost libs for the corresponding VS version
env = Environment(ENV = os.environ, MSVC_VERSION='12.0')

# find the third party libs
for thirdpartyDir in thirdpartyDirs:
  if not os.environ.has_key(thirdpartyDir):
    raise Exception(thirdpartyDir+' env variable not defined. '+thirdpartyDirs[thirdpartyDir])

env = Environment(ENV = os.environ, MSVC_VERSION='12.0')

env.Append(CPPPATH = [os.path.join(os.environ['FABRIC_DIR'], 'include')])
env.Append(CPPPATH = [os.path.join(os.environ['FABRIC_DIR'], 'include', 'FabricServices')])
env.Append(LIBPATH = [os.path.join(os.environ['FABRIC_DIR'], 'lib')])
env.Append(CPPDEFINES = ['FEC_SHARED'])

# Fabric Engine libraries
# and standard libraries
env.Append(LIBS = ['FabricCore-2.0'])
if buildType == 'Debug':
  env.Append(LIBS = ['FabricServices-MSVC-'+env['MSVC_VERSION']+'-mtd'])
else:
  env.Append(LIBS = ['FabricServices-MSVC-'+env['MSVC_VERSION']+'-mt'])
env.Append(LIBS = ['user32', 'advapi32', 'gdi32', 'shell32', 'ws2_32', 'Opengl32', 'glu32'])
env.Append(LINKFLAGS = ['/SUBSYSTEM:CONSOLE'])
env.Append(LIBS = ['FabricSplitSearch'])

qtDir = os.environ['QT_DIR']
qtFlags = {}
qtMOC = None
if platform.system().lower().startswith('win'):
  if buildType == 'Debug':
    suffix = 'd4'
  else:
    suffix = '4'
  qtFlags['CPPPATH'] = [os.path.join(qtDir, 'include')]
  qtFlags['LIBPATH'] = [os.path.join(qtDir, 'lib')]
  qtFlags['LIBS'] = ['QtCore'+suffix, 'QtGui'+suffix, 'QtOpenGL'+suffix]
  qtMOC = os.path.join(qtDir, 'bin', 'moc.exe')
elif platform.system().lower().startswith('dar'):
  qtFlags['CPPPATH'] = ['/usr/local/include']
  qtFlags['FRAMEWORKPATH'] = ['/usr/local/lib']
  qtFlags['FRAMEWORKS'] = ['QtCore', 'QtGui', 'QtOpenGL']
  qtMOC = '/usr/local/bin/moc'
elif platform.system().lower().startswith('lin'):
  qtFlags['CPPDEFINES'] = ['_DEBUG']
  qtFlags['CPPPATH'] = ['/usr/include']
  qtFlags['LIBPATH'] = ['/usr/lib']
  qtFlags['LIBS'] = ['QtGui', 'QtCore', 'QtOpenGL']
  qtMOC = '/usr/bin/moc-qt4'

if buildType == 'Debug':
  env.Append(CPPDEFINES = ['_DEBUG'])
  env.Append(CPPDEFINES = ['_ITERATOR_DEBUG_LEVEL=2'])
  env.Append(CCFLAGS = ['/MTd'])
else:
  env.Append(CCFLAGS = ['/MT'])
  
# ui related libraries
env.MergeFlags(qtFlags)
env.Append(CPPPATH = [os.path.join(os.environ['FABRIC_UI_DIR'], 'stage', 'include')])
env.Append(CPPPATH = [os.path.join(os.environ['FABRIC_UI_DIR'], 'stage', 'include', 'FabricUI')])
env.Append(LIBS = ['FabricUI'])

p = env.Program('non_qt_app', Glob('*.cpp'))
